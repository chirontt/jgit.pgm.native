plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'  //requires JDK11+
    id 'com.gluonhq.client-gradle-plugin' version '0.1.40'  //requires GraalVM 21.1+
}

wrapper {
    gradleVersion = "7.0.2"
    distributionType = Wrapper.DistributionType.ALL
}

group = 'com.github.chirontt'
version = '5.11.1'
description = 'JGit PGM native executable built by GraalVM'

ext {
    mainClassName = 'org.eclipse.jgit.pgm.Main'
    jgitReleaseVersion = '5.11.1.202105131744-r'
    graalvmVersion = '21.1.0'
    xzVersion = '1.8'
}

repositories {
    mavenCentral()
    mavenLocal()
}

compileJava {
    options.release = 11  //use GraalVM 21+ for compiling
    options.encoding = 'UTF-8'
}

dependencies {
    implementation "org.eclipse.jgit:org.eclipse.jgit.pgm:$jgitReleaseVersion"

    //optional, but required by GraalVM native-image build
    implementation "org.tukaani:xz:$xzVersion"

    //for compiling GraalVM substitution classes
    compileOnly "org.graalvm.nativeimage:svm:$graalvmVersion"
}

application {
    mainClass = project.mainClassName
    applicationName = project.name
}

run {
    //get system properties specified from the command line (for debugging, etc.)
    //and pass them on to the running application's JVM
    systemProperties = System.getProperties()

    //use the following jvmArgs for as many different run scenarios as possible,
    //and for all the code-execution paths as much as possible,
    //to generate (or merge with) the GraalVM native-image configuration files
    //in the src/main/resources/META-INF/native-image directory.
    //This directory is read by GraalVM during the native-image build.

    //jvmArgs = ["-agentlib:native-image-agent=config-merge-dir=src/main/resources/META-INF/native-image"]
}

gluonClient {
    //packages/classes to be initialized at native image build time
    def buildTimeInitClasses = file('src/main/resources/META-INF/substrate/config/initbuildtime').getText('UTF-8').trim()

    //packages/classes to be initialized at native image run time
    def runTimeInitClasses = [
        'org.eclipse.jgit.internal.storage.file.WindowCache',
        'org.eclipse.jgit.lib.internal.WorkQueue',
        'org.eclipse.jgit.lib.RepositoryCache',
        'org.eclipse.jgit.transport.HttpAuthMethod',
        'org.eclipse.jgit.util.FileUtils',
    ]

    compilerArgs = [
        '--initialize-at-build-time=' + buildTimeInitClasses,
        '--initialize-at-run-time=' + runTimeInitClasses.join(','),
        '--report-unsupported-elements-at-runtime',
        '-Djava.awt.headless=false',
    ]
}

