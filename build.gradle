plugins {
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.10.6'
}

tasks.wrapper {
    gradleVersion = '8.13'
    distributionType = Wrapper.DistributionType.ALL
}

group = 'com.github.chirontt'
version = '7.2.0'
description = 'JGit PGM native executable built by GraalVM'

ext {
    mainClassName = 'com.github.chirontt.jgit.graalvm.NativeMain'
    jgitReleaseVersion = '7.2.0.202503040940-r'
    slf4jVersion = '2.0.17'
    xzVersion = '1.10'
    graalvmVersion = '22.3.5'
    currentPlatform = getCurrentPlatform()
}

//detect the OS (assuming 64-bit, on Intel/AMD hardware)
private static String getCurrentPlatform() {
    def currentOS = org.gradle.internal.os.OperatingSystem.current()
    return currentOS.isLinux() ? 'linux' :
           currentOS.isMacOsX() ? 'macos' :
           currentOS.isWindows() ? 'windows' :
           'unknown'
}

repositories {
    mavenCentral()
    maven {
        url = "https://repo.eclipse.org/content/groups/releases/"
    }
    mavenLocal()
}

compileJava {
    options.release = 17  //use GraalVM 21+ for compiling
    options.encoding = 'UTF-8'
}

dependencies {
    implementation("org.eclipse.jgit:org.eclipse.jgit.pgm:$jgitReleaseVersion") {
        exclude group: 'org.slf4j', module: '*'
    }
    implementation "org.slf4j:slf4j-simple:$slf4jVersion"

    //optional, but required by GraalVM native-image build
    implementation "org.tukaani:xz:$xzVersion"

    //for compiling GraalVM Feature implementation classes
    compileOnly "org.graalvm.sdk:graal-sdk:$graalvmVersion"
}

sourceSets {
    main {
        resources {
            //include current platform's GraalVM native-image configuration files
            srcDirs = ["src/graal-cfg/$currentPlatform"]
        }
    }
}

application {
    mainClass = project.mainClassName
    applicationName = project.name
}

run {
    //get system properties specified from the command line (for debugging, etc.)
    //and pass them on to the running application's JVM
    systemProperties = System.getProperties()

    //use the following jvmArgs for as many different run scenarios as possible,
    //and for all the code-execution paths as much as possible,
    //to generate (or merge with) the GraalVM native-image configuration files
    //in the src/graal-cfg/$currentPlatform/META-INF/native-image directory.
    //This directory is read by GraalVM during the native-image build.

    //jvmArgs = ["-agentlib:native-image-agent=config-merge-dir=src/graal-cfg/$currentPlatform/META-INF/native-image"]
}

//copy the font config files from the JDK
task copyFontConfigFiles(type: Copy) {
    def jdkHome = System.getProperty('java.home')
    from ("$jdkHome/lib") {
        include 'fontconfig.bfc', 'fontconfig.properties.src'
    }
    into "$buildDir/native/nativeCompile/lib"
}

//create a stand-alone executable uber jar
//including all dependencies
task uberJar(type: Jar) {
    archiveClassifier = 'no-deps'

    with jar
    manifest {
        attributes(
            'Main-Class': project.mainClassName,
            'Implementation-Version': jgitReleaseVersion,
            'Created-By': System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')',
            'Built-By': System.getProperty('user.name'),
            'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
            'Multi-Release': 'true',
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    duplicatesStrategy = 'exclude'
}

graalvmNative {
    toolchainDetection = false
    binaries {
        main {
            imageName = project.name
            mainClass = project.mainClassName
            debug = false
            verbose = true
            fallback = false

            //list of GraalVM Feature implementation classes
            def featureClasses = [
                'com.github.chirontt.jgit.graalvm.BouncyCastleFeature',
            ]

            //packages/classes to be initialized at native image build time
            def buildTimeInitClasses = [
                'com.google.gson',
                'com.sun.beans.introspect.ClassInfo',
                'com.sun.beans.introspect.PropertyInfo',
                'java.beans.Introspector',
                'org.apache.sshd',
                'org.eclipse.jetty',
                'org.eclipse.jgit',
                'org.slf4j',
            ]

            //packages/classes to be initialized at native image run time
            def runTimeInitClasses = [
                'org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator$LazyKeyLengthsHolder',
                'org.eclipse.jgit.internal.storage.file.WindowCache',
                'org.eclipse.jgit.internal.transport.sshd.agent.connector.$Proxy48',
                'org.eclipse.jgit.internal.transport.sshd.agent.connector.$Proxy49',
                'org.eclipse.jgit.internal.transport.sshd.agent.connector.$Proxy50',
                'org.eclipse.jgit.internal.transport.sshd.agent.connector.$Proxy51',
                'org.eclipse.jgit.internal.transport.sshd.agent.connector.$Proxy52',
                'org.eclipse.jgit.internal.transport.sshd.agent.connector.Sockets$SockAddr',
                'org.eclipse.jgit.lib.RepositoryCache',
                'org.eclipse.jgit.lib.internal.WorkQueue',
                'org.eclipse.jgit.transport.HttpAuthMethod',
            ]

            //packages/classes to be re-initialized at native image run time
            def runTimeReInitClasses = [
                'org.apache.sshd.common.random.JceRandom:rerun',
                'org.apache.sshd.common.random.JceRandom$Cache:rerun',
                //all BouncyCastle classes are required to be initialized at build time
                //(specified in the BouncyCastleFeature class), but due to SecureRandom seeding
                //in their static initialization blocks, some BouncyCastle classes need be
                //re-initialized at native image run time:
                'org.bouncycastle.crypto.CryptoServicesRegistrar:rerun',
                'org.bouncycastle.jcajce.provider.drbg.DRBG:rerun',
                'org.bouncycastle.jcajce.provider.drbg.DRBG$Default:rerun',
                'org.bouncycastle.jcajce.provider.drbg.DRBG$NonceAndIV:rerun',
                'org.eclipse.jgit.gpg.bc.internal.BouncyCastleGpgKeyLocator:rerun',
                'org.eclipse.jgit.util.FS:rerun',
                'org.eclipse.jgit.util.FileUtils:rerun',
                'org.eclipse.jgit.util.SystemReader:rerun',
                'org.eclipse.jgit.util.SystemReader$Default:rerun',
                'org.eclipse.jgit.util.sha1.SHA1:rerun',
            ]

            jvmArgs.add('-Djava.awt.headless=false')

            if (currentPlatform == 'linux') {
                runTimeReInitClasses.add('org.eclipse.jgit.util.FS_POSIX:rerun')
            }
            else if (currentPlatform == 'windows') {
                runTimeReInitClasses.add('org.eclipse.jgit.util.FS_Win32:rerun')
                runTimeReInitClasses.add('org.eclipse.jgit.util.FS_Win32_Cygwin:rerun')
            }

            buildArgs.add('--gc=epsilon')  //no garbage collector
            buildArgs.add('--enable-url-protocols=http,https')
            buildArgs.add('--features=' + featureClasses.join(','))
            buildArgs.add('--initialize-at-build-time=' + buildTimeInitClasses.join(','))
            buildArgs.add('--initialize-at-run-time=' + runTimeInitClasses.join(','))
            buildArgs.add('-H:ClassInitialization=' + runTimeReInitClasses.join(','))
            buildArgs.add('-H:+AddAllCharsets')
            buildArgs.add('--native-image-info')
            buildArgs.add('-march=compatibility') //only available in GraalVM for JDK 17+
            buildArgs.add('-H:+TraceNativeToolUsage')

            useFatJar = false
        }
    }
}

tasks.named("nativeCompile") {
    //use the uber jar as long classpath becomes a problem in Windows:
    dependsOn uberJar
    classpathJar = uberJar.archiveFile

    if (currentPlatform == 'windows') {
        finalizedBy copyFontConfigFiles
    }
}

