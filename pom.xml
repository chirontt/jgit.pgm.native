<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.github.chirontt</groupId>
    <artifactId>jgit.pgm.native</artifactId>
    <version>6.0.0</version>
    <packaging>jar</packaging>

    <name>jgit</name> <!-- name of the resulting native executable -->
    <description>JGit PGM native executable built by GraalVM</description>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <native.maven.plugin.version>0.9.8</native.maven.plugin.version>
        <jgit.release.version>6.0.0.202111291000-r</jgit.release.version>
        <graalvm.version>21.3.0</graalvm.version>
        <xz.version>1.9</xz.version>
        <jgit.mainClass>com.github.chirontt.jgit.graalvm.NativeMain</jgit.mainClass>
        <jgit.args></jgit.args>
        <!-- system properties for the application when run by exec:exec command;
             can be specified on the command line with -Dsys.props="..."
        -->
        <sys.props></sys.props>
        <native.image.dir.name>native-image-${current.platform}</native.image.dir.name>
        <!-- packages/classes to be initialized at native image build time -->
        <build.time.init>com.google.gson,com.sun.beans.introspect.ClassInfo,com.sun.beans.introspect.PropertyInfo,java.beans.Introspector,org.apache.log4j,org.apache.sshd,org.eclipse.jetty,org.eclipse.jgit,org.slf4j</build.time.init>
        <!-- packages/classes to be initialized at native image run time -->
        <run.time.init>org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator$LazyKeyLengthsHolder,org.eclipse.jgit.internal.storage.file.WindowCache,org.eclipse.jgit.lib.internal.WorkQueue,org.eclipse.jgit.lib.RepositoryCache,org.eclipse.jgit.transport.HttpAuthMethod,org.eclipse.jgit.util.FileUtils</run.time.init>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.eclipse.jgit</groupId>
            <artifactId>org.eclipse.jgit.pgm</artifactId>
            <version>${jgit.release.version}</version>
        </dependency>
        <!-- optional, but required by GraalVM native-image build -->
        <dependency>
            <groupId>org.tukaani</groupId>
            <artifactId>xz</artifactId>
            <version>${xz.version}</version>
        </dependency>
        <!-- for compiling GraalVM substitution classes -->
        <dependency>
            <groupId>org.graalvm.nativeimage</groupId>
            <artifactId>svm</artifactId>
            <version>${graalvm.version}</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <!-- include the GraalVM native-image configuration files -->
            <resource>
                <directory>src/graal-cfg/${current.platform}</directory>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <executable>java</executable>
                    <arguments>
                        <!-- GraalVM's agent to generate (or merge with) native-image configuration files -->
                        <!-- argument>-agentlib:native-image-agent=config-merge-dir=src/graal-cfg/${current.platform}/META-INF/native-image</argument -->
                        <argument>${sys.props}</argument>
                        <argument>-classpath</argument>
                        <classpath/>
                        <argument>${jgit.mainClass}</argument>
                        <argument>"${jgit.args}"</argument>
                    </arguments>
                </configuration>
            </plugin>
            <!-- create stand-alone executable uber jar including all dependencies -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.4</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <shadedClassifierName>no-deps</shadedClassifierName>
                            <filters>
                                <filter>
                                    <!-- exclude files that sign a jar -->
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <transformers>
                                <transformer
                                    implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <Main-Class>${jgit.mainClass}</Main-Class>
                                        <Multi-Release>true</Multi-Release>
                                    </manifestEntries>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.graalvm.buildtools</groupId>
                <artifactId>native-maven-plugin</artifactId>
                <version>${native.maven.plugin.version}</version>
                <executions>
                    <!-- execution>
                        <id>test-native</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                    </execution -->
                    <execution>
                        <id>build-native</id>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <phase>package</phase>
                    </execution>
                </executions>
                <configuration>
                    <!-- outputDir>${project.build.directory}/${nativeImageDirName}</outputDir -->
                    <imageName>${project.name}</imageName>
                    <mainClass>${jgit.mainClass}</mainClass>
                    <buildArgs>
                        <buildArg>-Djava.awt.headless=false</buildArg> <!-- especially for Linux -->
                        <buildArg>--gc=epsilon</buildArg>  <!-- no garbage collector -->
                        <buildArg>--no-fallback</buildArg>
                        <buildArg>--enable-http</buildArg>
                        <buildArg>--enable-https</buildArg>
                        <buildArg>--initialize-at-build-time=${build.time.init}</buildArg>
                        <buildArg>--initialize-at-run-time=${run.time.init}</buildArg>
                        <buildArg>--native-image-info</buildArg>
                        <buildArg>--verbose</buildArg>
                        <buildArg>--allow-incomplete-classpath</buildArg>
                        <buildArg>-H:+TraceNativeToolUsage</buildArg>
                        <buildArg>-H:TempDirectory=${project.build.directory}/tmp/${native.image.dir.name}</buildArg>
                        <buildArg>-H:Path=${project.build.directory}/${native.image.dir.name}</buildArg>
                    </buildArgs>
                    <skip>false</skip>
                    <!-- use the shaded uber jar for native image compiling -->
                    <classpath>
                        <param>
                            ${project.build.directory}/${project.artifactId}-${project.version}-no-deps.jar
                        </param>
                    </classpath>
                </configuration>
            </plugin>
            <!-- remove unneeded .dll/.txt files -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>remove-unneeded-dll-files</id>
                        <phase>package</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                    </execution>
                </executions>
                <configuration>
                    <target>
                        <move todir="${project.build.directory}/tmp/${native.image.dir.name}">
                            <fileset dir="${project.build.directory}/${native.image.dir.name}">
                                <include name="*.dll"/>
                                <include name="*.txt"/>
                                <!-- keep the shim DLLs -->
                                <exclude name="java.dll"/>
                                <exclude name="jvm.dll"/>
                            </fileset>
                        </move>
                        <move file="${project.build.directory}/${native.image.dir.name}/reports"
                              tofile="${project.build.directory}/tmp/${native.image.dir.name}/reports"
                              failonerror="false" quiet="true"/>
                    </target>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>linux</id>
            <activation>
                <os>
                    <name>linux</name>
                </os>
            </activation>
            <properties>
                <current.platform>linux</current.platform>
            </properties>
        </profile>
        <profile>
            <id>macosx</id>
            <activation>
                <os>
                    <name>mac os x</name>
                </os>
            </activation>
            <properties>
                <current.platform>macos</current.platform>
            </properties>
        </profile>
        <profile>
            <id>windows</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <properties>
                <current.platform>windows</current.platform>
            </properties>
            <build>
                <plugins>
                    <!-- copy the font config files from the JDK -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>3.2.0</version>
                        <executions>
                            <execution>
                                <id>copy-font-config-files</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/${native.image.dir.name}/lib</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${java.home}/lib</directory>
                                            <includes>
                                                <include>fontconfig.bfc</include>
                                                <include>fontconfig.properties.src</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
